# Conversational Agent for Code Translation to Rust

This repository contains the implementation and evaluation of a multi-phase automated translation framework that converts C code to Rust. The approach is designed to facilitate the migration of legacy projects by preserving functionality, enhancing maintainability, and leveraging Rust’s memory safety and performance benefits.

## Overview

Automated code translation transforms code from one language to another while preserving its functionality. This project focuses specifically on translating C code to Rust, addressing developers’ hesitations in migrating legacy codebases. By automatically converting C to Rust, the framework extends software lifespan, improves maintainability, and broadens compatibility across platforms.

## Methodology

The proposed approach is organized into four distinct phases:

- **Initial Translation:**  
  Leverages Mistral-7b-instruct to generate a baseline Rust translation from the input C code.

- **Compilation Validation:**  
  Systematically checks the generated Rust code for compilation errors. When errors occur, an error-driven refactoring approach uses compiler messages to identify and resolve specific translation issues, ensuring syntactic correctness and compliance with Rust’s safety standards.

- **Fuzz Testing:**  
  Executes comprehensive fuzz testing to validate that the translated Rust code functions identically to the original C code. This phase is critical for uncovering semantic discrepancies that might not surface during compilation checks.

- **Multi-Agent Collaboration:**  
  Implements a Mistral-Llama feedback loop that iteratively processes counterexamples to improve translation accuracy. This counterexample-driven feedback mechanism refines translations through targeted improvements while maintaining lightweight configurations for cost-effectiveness and scalability.

## Evaluation

The framework was evaluated using two distinct C libraries:
 
- **libopenaptx:** A C library designed for audio processing applications (31 source files).
- **opl:** A C library focused on sound card emulation (81 source files).

These evaluations involved configuring the initial translation with up to 12 repeat iterations and applying fuzz testing parameters (e.g., a maximum input size of 32768 bytes and a 7-minute execution timeout per test case) to ensure rigorous validation of the translated Rust code.

## Key Contributions

- **Multi-Phase Translation Process:**  
  Integrates iterative refinement techniques—from initial translation and compilation validation to fuzz testing and multi-agent collaboration—to achieve high-fidelity code translations.

- **Error-Driven Repair:**  
  Uses compiler error messages and counterexample-based feedback loops to systematically identify and resolve translation errors.

- **Leveraging Multiple LLMs:**  
  Coordinates the strengths of Mistral and Llama to enhance translation reliability and tackle complex code dependencies.

## Replication

A complete replication package is available with detailed instructions for evaluation and dataset construction. Researchers and practitioners can refer to the replication package to reproduce experimental results and further explore the methodology.

## Authors

- Quoc Hung Le (qle3@ncsu.edu)  
- Yung Hsuan Teng (yteng2@ncsu.edu)  
- Krishna Prashant Patel (kpatel43@ncsu.edu)  
- Dhyey Samirbhai Shah (dshah22@ncsu.edu)

## Citation

If you use this work in your research, please cite:

  Quoc Hung Le, Yung Hsuan Teng, Krishna Prashant Patel, and Dhyey Samirbhai Shah. 2024. *Conversational Agent for Code Translation to Rust*. 1, 1 (December 2024), 8 pages.

---

This README summarizes the project as described in the report and provides an overview of the framework’s methodology, evaluation, and key contributions in automating the translation of C code to Rust.

Citations:
[1] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/31594813/71f1edf6-5de2-4d9a-ac1f-b2861852e6a0/GAISE_report.pdf
[2] https://github.com/codebasics/project-genai-cold-email-generator/activity
[3] https://arxiv.org/html/2411.13990v3
[4] https://arxiv.org/abs/2411.13990
[5] https://arxiv.org/html/2411.13990v1
[6] http://arxiv.org/pdf/2411.13990.pdf
[7] https://github.com/TrustedGPT/RustRepoTrans
[8] https://www.semanticscholar.org/paper/Repository-level-Code-Translation-Benchmark-Rust-Ou-Liu/69a9edf97014dd19bbc2dbc27d109b094f8a9a12
[9] https://github.com/TrustedGPT
[10] https://www.researchgate.net/publication/386021817_Repository-level_Code_Translation_Benchmark_Targeting_Rust
[11] https://github.com/TrustedGPT/RustRepoTrans/activity
[12] https://github.com/TrustedGPT/RustRepoTrans/blob/main/requirements.txt
[13] https://www.alphaxiv.org/abs/2411.13990
[14] https://github.com/TrustedGPT/RustRepoTrans/labels
[15] https://github.com/TrustedGPT/RustRepoTrans/actions
[16] https://openreview.net/forum?id=pPjZIOuQuF
[17] https://cs.paperswithcode.com/paper/repository-level-code-translation-benchmark
[18] https://github.com/TrustedGPT/RustRepoTrans/security
[19] https://aclanthology.org/2024.naacl-srw.15.pdf
[20] https://github.com/SYSUSELab
[21] https://github.com/trending?l=rust
[22] https://paperswithcode.com/task/code-translation/codeless

---
Answer from Perplexity: pplx.ai/share
