{"Includes":["import (\n\t\"strings\"\n\t\"unicode/utf8\"\n)"],"Defines":["const ()"],"TypeDefs":[],"Globals":["var (\n\tmoov_io_ach_spaceZeros  map[int]string = moov_io_ach_populateMap(94, \" \")\n\tmoov_io_ach_stringZeros map[int]string = moov_io_ach_populateMap(94, \"0\")\n)"],"Structs":["type moov_io_ach_Addenda99 struct {\n\t// ID is a client defined string used as a reference to this record.\n\n\t// TypeCode Addenda types code '99'\n\n\t// ReturnCode field contains a standard code used by an ACH Operator or RDFI to describe the reason for returning an Entry.\n\t// Must exist in returnCodeDict\n\n\t// OriginalTrace This field contains the Trace Number as originally included on the forward Entry or Prenotification.\n\t// The RDFI must include the Original Entry Trace Number in the Addenda Record of an Entry being returned to an ODFI,\n\t// in the Addenda Record of an 98, within an Acknowledgment Entry, or with an RDFI request for a copy of an authorization.\n\n\t// DateOfDeath The field date of death is to be supplied on Entries being returned for reason of death (return reason codes R14 and R15). Format: YYMMDD (Y=Year, M=Month, D=Day)\n\tDateOfDeath string `json:\"dateOfDeath\"`\n\t// OriginalDFI field contains the Receiving DFI Identification (addenda.RDFIIdentification) as originally included on the forward Entry or Prenotification that the RDFI is returning or correcting.\n\n\t// AddendaInformation\n\n\t// TraceNumber matches the Entry Detail Trace Number of the entry being returned.\n\t//\n\t// Use TraceNumberField for a properly formatted string representation.\n\n\t// validator is composed for data validation\n\n\t// converters is composed for ACH to GoLang Converters\n\tmoov_io_ach_converters\n}","type moov_io_ach_converters struct{}"],"Function Declarations":["","","","",""],"Function Implementations":["func (c *moov_io_ach_converters) alphaField(s string, max uint) string {\n\tln := uint(utf8.RuneCountInString(s))\n\tif ln \u003e max {\n\t\treturn s[:max]\n\t}\n\n\tm := int(max - ln)\n\tpad, exists := moov_io_ach_spaceZeros[m]\n\tif exists {\n\t\treturn s + pad\n\t}\n\t// slow path\n\treturn s + strings.Repeat(\" \", int(max-ln))\n}","func (c *moov_io_ach_converters) stringField(s string, max uint) string {\n\tln := uint(utf8.RuneCountInString(s))\n\tif ln \u003e max {\n\t\treturn s[:max]\n\t}\n\n\t// Pad with preallocated string\n\tm := int(max - ln)\n\tpad, exists := moov_io_ach_stringZeros[m]\n\tif exists {\n\t\treturn pad + s\n\t}\n\t// slow path\n\treturn strings.Repeat(\"0\", m) + s\n}","func (c *moov_io_ach_converters) formatSimpleDate(s string) string {\n\tif s == \"\" {\n\t\treturn c.stringField(s, 6)\n\t}\n\treturn s\n}","func moov_io_ach_populateMap(max int, zero string) map[int]string {\n\tout := make(map[int]string, max)\n\tfor i := 0; i \u003c max; i++ {\n\t\tout[i] = strings.Repeat(zero, i)\n\t}\n\treturn out\n}","func (Addenda99 *moov_io_ach_Addenda99) DateOfDeathField() string {\n\t// Return space padded 6 characters if it is a zero value of DateOfDeath\n\tif Addenda99.DateOfDeath == \"\" {\n\t\treturn Addenda99.alphaField(\"\", 6)\n\t}\n\treturn Addenda99.formatSimpleDate(Addenda99.DateOfDeath)\n}"],"Enums":[]}
