{"Includes":["import (\n\t\"strconv\"\n\t\"strings\"\n)"],"Defines":["const ()"],"TypeDefs":[],"Globals":["var (\n\tmoov_io_ach_stringZeros map[int]string = moov_io_ach_populateMap(94, \"0\")\n)"],"Structs":["type moov_io_ach_Addenda18 struct {\n\t// ID is a client defined string used as a reference to this record.\n\n\t// TypeCode Addenda18 types code '18'\n\n\t// ForeignCorrespondentBankName contains the name of the Foreign Correspondent Bank\n\n\t// Foreign Correspondent Bank Identification Number Qualifier contains a 2-digit code that\n\t// identifies the numbering scheme used in the Foreign Correspondent Bank Identification Number\n\t// field. Code values for this field are:\n\t// “01” = National Clearing System\n\t// “02” = BIC Code\n\t// “03” = IBAN Code\n\n\t// Foreign Correspondent Bank Identification Number contains the bank ID number of the Foreign\n\t// Correspondent Bank\n\n\t// Foreign Correspondent Bank Branch Country Code contains the two-character code, as approved by\n\t// the International Organization for Standardization (ISO), to identify the country in which the\n\t// branch of the Foreign Correspondent Bank is located. Values can be found on the International\n\t// Organization for Standardization website: www.iso.org\n\n\t// SequenceNumber is consecutively assigned to each Addenda18 Record following\n\t// an Entry Detail Record. The first addenda18 sequence number must always\n\t// be a \"1\".\n\tSequenceNumber int `json:\"sequenceNumber\"`\n\t// EntryDetailSequenceNumber contains the ascending sequence number section of the Entry\n\t// Detail or Corporate Entry Detail Record's trace number This number is\n\t// the same as the last seven digits of the trace number of the related\n\t// Entry Detail Record or Corporate Entry Detail Record.\n\n\t// validator is composed for data validation\n\n\t// converters is composed for ACH to GoLang Converters\n\tmoov_io_ach_converters\n}","type moov_io_ach_converters struct{}"],"Function Declarations":["","",""],"Function Implementations":["func (c *moov_io_ach_converters) numericField(n int, max uint) string {\n\ts := strconv.FormatInt(int64(n), 10)\n\tif l := uint(len(s)); l \u003e max {\n\t\treturn s[l-max:]\n\t} else {\n\t\tm := int(max - l)\n\t\tpad, exists := moov_io_ach_stringZeros[m]\n\t\tif exists {\n\t\t\treturn pad + s\n\t\t}\n\t\t// slow path\n\t\treturn strings.Repeat(\"0\", m) + s\n\t}\n}","func moov_io_ach_populateMap(max int, zero string) map[int]string {\n\tout := make(map[int]string, max)\n\tfor i := 0; i \u003c max; i++ {\n\t\tout[i] = strings.Repeat(zero, i)\n\t}\n\treturn out\n}","func (addenda18 *moov_io_ach_Addenda18) SequenceNumberField() string {\n\treturn addenda18.numericField(addenda18.SequenceNumber, 4)\n}"],"Enums":[]}
