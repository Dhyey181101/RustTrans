{"Includes":["import (\n\t\"strings\"\n\t\"unicode/utf8\"\n)"],"Defines":["const ()"],"TypeDefs":[],"Globals":["var (\n\tmoov_io_ach_stringZeros map[int]string = moov_io_ach_populateMap(94, \"0\")\n)"],"Structs":["type moov_io_ach_ADVBatchControl struct {\n\t// ID is a client defined string used as a reference to this record.\n\n\t// This should be the same as BatchHeader ServiceClassCode for ADV: AutomatedAccountingAdvices.\n\n\t// EntryAddendaCount is a tally of each Entry Detail Record and each Addenda\n\t// Record processed, within either the batch or file as appropriate.\n\n\t// validate the Receiving DFI Identification in each Entry Detail Record is hashed\n\t// to provide a check against inadvertent alteration of data contents due\n\t// to hardware failure or program error\n\t//\n\t// In this context the Entry Hash is the sum of the corresponding fields in the\n\t// Entry Detail Records on the file.\n\n\t// TotalDebitEntryDollarAmount Contains accumulated Entry debit totals within the batch.\n\n\t// TotalCreditEntryDollarAmount Contains accumulated Entry credit totals within the batch.\n\n\t// ACHOperatorData is an alphanumeric code used to identify an ACH Operator\n\n\t// ODFIIdentification the routing number is used to identify the DFI originating entries within a given branch.\n\tODFIIdentification string `json:\"ODFIIdentification\"`\n\t// BatchNumber this number is assigned in ascending sequence to each batch by the ODFI\n\t// or its Sending Point in a given file of entries. Since the batch number\n\t// in the Batch Header Record and the Batch Control Record is the same,\n\t// the ascending sequence number should be assigned by batch and not by record.\n\n\t// validator is composed for data validation\n\n\t// converters is composed for ACH to golang Converters\n\tmoov_io_ach_converters\n}","type moov_io_ach_converters struct{}"],"Function Declarations":["","",""],"Function Implementations":["func (c *moov_io_ach_converters) stringField(s string, max uint) string {\n\tln := uint(utf8.RuneCountInString(s))\n\tif ln \u003e max {\n\t\treturn s[:max]\n\t}\n\n\t// Pad with preallocated string\n\tm := int(max - ln)\n\tpad, exists := moov_io_ach_stringZeros[m]\n\tif exists {\n\t\treturn pad + s\n\t}\n\t// slow path\n\treturn strings.Repeat(\"0\", m) + s\n}","func (bc *moov_io_ach_ADVBatchControl) ODFIIdentificationField() string {\n\treturn bc.stringField(bc.ODFIIdentification, 8)\n}","func moov_io_ach_populateMap(max int, zero string) map[int]string {\n\tout := make(map[int]string, max)\n\tfor i := 0; i \u003c max; i++ {\n\t\tout[i] = strings.Repeat(zero, i)\n\t}\n\treturn out\n}"],"Enums":[]}
