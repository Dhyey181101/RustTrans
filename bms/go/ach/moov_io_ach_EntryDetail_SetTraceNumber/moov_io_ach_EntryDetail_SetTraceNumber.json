{"Includes":["import (\n\t\"strconv\"\n\t\"strings\"\n\t\"unicode/utf8\"\n)"],"Defines":["const ()"],"TypeDefs":[],"Globals":["var (\n\tmoov_io_ach_stringZeros map[int]string = moov_io_ach_populateMap(94, \"0\")\n)"],"Structs":["type moov_io_ach_EntryDetail struct {\n\t// ID is a client defined string used as a reference to this record.\n\n\t// TransactionCode if the receivers account is checking, savings, general ledger (GL) or loan.\n\n\t// RDFIIdentification is the RDFI's routing number without the last digit.\n\t// Receiving Depository Financial Institution\n\n\t// CheckDigit the last digit of the RDFI's routing number\n\n\t// DFIAccountNumber is the receiver's bank account number you are crediting/debiting.\n\t// It important to note that this is an alphanumeric field, so its space padded, no zero padded\n\n\t// Amount Number of cents you are debiting/crediting this account\n\n\t// IdentificationNumber an internal identification (alphanumeric) that\n\t// you use to uniquely identify this Entry Detail Record\n\n\t// IndividualName The name of the receiver, usually the name on the bank account\n\n\t// DiscretionaryData allows ODFIs to include codes, of significance only to them,\n\t// to enable specialized handling of the entry. There will be no\n\t// standardized interpretation for the value of this field. It can either\n\t// be a single two-character code, or two distinct one-character codes,\n\t// according to the needs of the ODFI and/or Originator involved. This\n\t// field must be returned intact for any returned entry.\n\t//\n\t// WEB and TEL batches use the Discretionary Data Field as the Payment Type Code\n\n\t// AddendaRecordIndicator indicates the existence of an Addenda Record.\n\t// A value of \"1\" indicates that one ore more addenda records follow,\n\t// and \"0\" means no such record is present.\n\n\t// TraceNumber is assigned by the ODFI or software vendor and used as part of identification.\n\t//\n\t// The format of trace numbers is the first 8 digits of the ODFI's routing number followed by\n\t// 7 digits chosen by the ODFI or software vendor.\n\t//\n\t// Sequentual or random numbers can be chosen. The only requirement of Nacha is unique trace\n\t// numbers within a batch and file.\n\t//\n\t// Trace Numbers are included in each Entry Detail Record, Corporate Entry Detail Record,\n\t// and addenda Record.\n\t//\n\t// In association with the Batch Number, transmission (File Creation) Date,\n\t// and File ID Modifier, the Trace Number uniquely identifies an entry within a given file.\n\t//\n\t// For addenda Records, the Trace Number will be identical to the Trace Number\n\t// in the associated Entry Detail Record, since the Trace Number is associated\n\t// with an entry or item rather than a physical record.\n\t//\n\t// Use TraceNumberField for a properly formatted string representation.\n\tTraceNumber string `json:\"traceNumber,omitempty\"`\n\t// Addenda02 for use with StandardEntryClassCode MTE, POS, and SHR\n\tAddenda02 *moov_io_ach_Addenda02 `json:\"addenda02,omitempty\"`\n\t// Addenda05 for use with StandardEntryClassCode: ACK, ATX, CCD, CIE, CTX, DNE, ENR, WEB, PPD, TRX.\n\n\t// Addenda98 for user with Notification of Change\n\tAddenda98 *moov_io_ach_Addenda98 `json:\"addenda98,omitempty\"`\n\t// Addenda98 for user with Refused Notification of Change\n\tAddenda98Refused *moov_io_ach_Addenda98Refused `json:\"addenda98Refused,omitempty\"`\n\t// Addenda99 for use with Returns\n\tAddenda99 *moov_io_ach_Addenda99 `json:\"addenda99,omitempty\"`\n\t// Addenda99Contested for use with Contested Dishonored Returns\n\tAddenda99Contested *moov_io_ach_Addenda99Contested `json:\"addenda99Contested,omitempty\"`\n\t// Addenda99Dishonored for use with Dishonored Returns\n\tAddenda99Dishonored *moov_io_ach_Addenda99Dishonored `json:\"addenda99Dishonored,omitempty\"`\n\t// Category defines if the entry is a Forward, Return, or NOC\n\n\t// validator is composed for data validation\n\n\t// converters is composed for ACH to golang Converters\n\tmoov_io_ach_converters\n}","type moov_io_ach_converters struct{}","type moov_io_ach_Addenda02 struct {\n\t// ID is a client defined string used as a reference to this record.\n\n\t// TypeCode Addenda02 type code '02'\n\n\t// ReferenceInformationOne may be used for additional reference numbers, identification numbers,\n\t// or codes that the merchant needs to identify the particular transaction or customer.\n\n\t// ReferenceInformationTwo  may be used for additional reference numbers, identification numbers,\n\t// or codes that the merchant needs to identify the particular transaction or customer.\n\n\t// TerminalIdentificationCode identifies an Electronic terminal with a unique code that allows\n\t// a terminal owner and/or switching network to identify the terminal at which an Entry originated.\n\n\t// TransactionSerialNumber is assigned by the terminal at the time the transaction is originated.  The\n\t// number, with the Terminal Identification Code, serves as an audit trail for the transaction and is\n\t// usually assigned in ascending sequence.\n\n\t// TransactionDate expressed MMDD identifies the date on which the transaction occurred.\n\n\t// AuthorizationCodeOrExpireDate indicates the code that a card authorization center has\n\t// furnished to the merchant.\n\n\t// Terminal Location identifies the specific location of a terminal (i.e., street names of an\n\t// intersection, address, etc.) in accordance with the requirements of Regulation E.\n\n\t// TerminalCity Identifies the city in which the electronic terminal is located.\n\n\t// TerminalState Identifies the state in which the electronic terminal is located\n\n\t// TraceNumber Standard Entry Detail Trace Number\n\t//\n\t// Use TraceNumberField for a properly formatted string representation.\n\tTraceNumber string `json:\"traceNumber,omitempty\"`\n\t// validator is composed for data validation\n\n\t// converters is composed for ACH to GoLang Converters\n\tmoov_io_ach_converters\n}","type moov_io_ach_Addenda98 struct {\n\t// ID is a client defined string used as a reference to this record.\n\n\t// TypeCode Addenda types code '98'\n\n\t// ChangeCode field contains a standard code used by an ACH Operator or RDFI to describe the reason for a change Entry.\n\t// Must exist in changeCodeDict\n\n\t// OriginalTrace This field contains the Trace Number as originally included on the forward Entry or Prenotification.\n\t// The RDFI must include the Original Entry Trace Number in the Addenda Record of an Entry being returned to an ODFI,\n\t// in the Addenda Record of an 98, within an Acknowledgment Entry, or with an RDFI request for a copy of an authorization.\n\n\t// OriginalDFI field contains the Receiving DFI Identification (addenda.RDFIIdentification) as originally included on the forward Entry or Prenotification that the RDFI is returning or correcting.\n\n\t// CorrectedData is the corrected data\n\n\t// TraceNumber matches the Entry Detail Trace Number of the entry being returned.\n\t//\n\t// Use TraceNumberField for a properly formatted string representation.\n\tTraceNumber string `json:\"traceNumber,omitempty\"`\n\n\t// validator is composed for data validation\n\n\t// converters is composed for ACH to GoLang Converters\n\tmoov_io_ach_converters\n}","type moov_io_ach_Addenda98Refused struct {\n\t// ID is a client defined string used as a reference to this record.\n\n\t// TypeCode Addenda types code '98'\n\n\t// RefusedChangeCode is the code specifying why the Notification of Change is being refused.\n\n\t// OriginalTrace This field contains the Trace Number as originally included on the forward Entry or Prenotification.\n\t// The RDFI must include the Original Entry Trace Number in the Addenda Record of an Entry being returned to an ODFI,\n\t// in the Addenda Record of an 98, within an Acknowledgment Entry, or with an RDFI request for a copy of an authorization.\n\n\t// OriginalDFI field contains the Receiving DFI Identification (addenda.RDFIIdentification) as originally included on the\n\t// forward Entry or Prenotification that the RDFI is returning or correcting.\n\n\t// CorrectedData is the corrected data\n\n\t// ChangeCode field contains a standard code used by an ACH Operator or RDFI to describe the reason for a change Entry.\n\n\t// TraceSequenceNumber is the last seven digits of the TraceNumber in the original Notification of Change\n\n\t// TraceNumber matches the Entry Detail Trace Number of the entry being returned.\n\t//\n\t// Use TraceNumberField for a properly formatted string representation.\n\tTraceNumber string `json:\"traceNumber\"`\n\n\t// validator is composed for data validation\n\n\t// converters is composed for ACH to GoLang Converters\n\tmoov_io_ach_converters\n}","type moov_io_ach_Addenda99 struct {\n\t// ID is a client defined string used as a reference to this record.\n\n\t// TypeCode Addenda types code '99'\n\n\t// ReturnCode field contains a standard code used by an ACH Operator or RDFI to describe the reason for returning an Entry.\n\t// Must exist in returnCodeDict\n\n\t// OriginalTrace This field contains the Trace Number as originally included on the forward Entry or Prenotification.\n\t// The RDFI must include the Original Entry Trace Number in the Addenda Record of an Entry being returned to an ODFI,\n\t// in the Addenda Record of an 98, within an Acknowledgment Entry, or with an RDFI request for a copy of an authorization.\n\n\t// DateOfDeath The field date of death is to be supplied on Entries being returned for reason of death (return reason codes R14 and R15). Format: YYMMDD (Y=Year, M=Month, D=Day)\n\n\t// OriginalDFI field contains the Receiving DFI Identification (addenda.RDFIIdentification) as originally included on the forward Entry or Prenotification that the RDFI is returning or correcting.\n\n\t// AddendaInformation\n\n\t// TraceNumber matches the Entry Detail Trace Number of the entry being returned.\n\t//\n\t// Use TraceNumberField for a properly formatted string representation.\n\tTraceNumber string `json:\"traceNumber,omitempty\"`\n\n\t// validator is composed for data validation\n\n\t// converters is composed for ACH to GoLang Converters\n\tmoov_io_ach_converters\n}","type moov_io_ach_Addenda99Contested struct {\n\t// ID is a client defined string used as a reference to this record.\n\n\t// TypeCode Addenda types code '99'\n\n\t// ContestedReturnCode is the return code explaining the contested dishonorment\n\n\t// OriginalEntryTraceNumber is the trace number specifieid in the initial entry\n\n\t// DateOriginalEntryReturned is the original entry's date\n\n\t// OriginalReceivingDFIIdentification is the DFI Identification specifieid in the initial entry\n\n\t// OriginalSettlementDate is the initial date of settlement\n\n\t// ReturnTraceNumber is the original returns trace number\n\n\t// ReturnSettlementDate is the original return's settlement date\n\n\t// ReturnReasonCode is the original return's code\n\n\t// DishonoredReturnTraceNumber is the dishonorment's trace number\n\n\t// DishonoredReturnSettlementDate is the dishonorment's settlement date\n\n\t// DishonoredReturnReasonCode is the dishonorment's return code\n\n\t// TraceNumber is the trace number for contesting\n\tTraceNumber string `json:\"traceNumber\"`\n\n\t// validator is composed for data validation\n\n\t// converters is composed for ACH to GoLang Converters\n\tmoov_io_ach_converters\n}","type moov_io_ach_Addenda99Dishonored struct {\n\t// ID is a client defined string used as a reference to this record.\n\n\t// TypeCode Addenda types code '99'\n\n\t// DishonoredReturnReasonCode is the return code explaining the dishonorment\n\n\t// OriginalEntryTraceNumber is the trace number specifieid in the initial entry\n\n\t// OriginalReceivingDFIIdentification is the DFI Identification specifieid in the initial entry\n\n\t// ReturnTraceNumber is the TraceNumber used when issuing the return\n\n\t// ReturnSettlementDate is the date of return issuing\n\n\t// ReturnReasonCode is the initial return code\n\n\t// AddendaInformation is additional data\n\n\t// TraceNumber is the trace number for dishonorment\n\tTraceNumber string `json:\"traceNumber\"`\n\n\t// validator is composed for data validation\n\n\t// converters is composed for ACH to GoLang Converters\n\tmoov_io_ach_converters\n}"],"Function Declarations":["","","",""],"Function Implementations":["func (c *moov_io_ach_converters) numericField(n int, max uint) string {\n\ts := strconv.FormatInt(int64(n), 10)\n\tif l := uint(len(s)); l \u003e max {\n\t\treturn s[l-max:]\n\t} else {\n\t\tm := int(max - l)\n\t\tpad, exists := moov_io_ach_stringZeros[m]\n\t\tif exists {\n\t\t\treturn pad + s\n\t\t}\n\t\t// slow path\n\t\treturn strings.Repeat(\"0\", m) + s\n\t}\n}","func (c *moov_io_ach_converters) stringField(s string, max uint) string {\n\tln := uint(utf8.RuneCountInString(s))\n\tif ln \u003e max {\n\t\treturn s[:max]\n\t}\n\n\t// Pad with preallocated string\n\tm := int(max - ln)\n\tpad, exists := moov_io_ach_stringZeros[m]\n\tif exists {\n\t\treturn pad + s\n\t}\n\t// slow path\n\treturn strings.Repeat(\"0\", m) + s\n}","func moov_io_ach_populateMap(max int, zero string) map[int]string {\n\tout := make(map[int]string, max)\n\tfor i := 0; i \u003c max; i++ {\n\t\tout[i] = strings.Repeat(zero, i)\n\t}\n\treturn out\n}","func (ed *moov_io_ach_EntryDetail) SetTraceNumber(ODFIIdentification string, seq int) {\n\ttraceNumber := ed.stringField(ODFIIdentification, 8) + ed.numericField(seq, 7)\n\ted.TraceNumber = traceNumber\n\n\t// Populate TraceNumber of addenda records that should match the Entry's trace number\n\tif ed.Addenda02 != nil {\n\t\ted.Addenda02.TraceNumber = traceNumber\n\t}\n\tif ed.Addenda98 != nil {\n\t\ted.Addenda98.TraceNumber = traceNumber\n\t}\n\tif ed.Addenda98Refused != nil {\n\t\ted.Addenda98Refused.TraceNumber = traceNumber\n\t}\n\tif ed.Addenda99 != nil {\n\t\ted.Addenda99.TraceNumber = traceNumber\n\t}\n\tif ed.Addenda99Contested != nil {\n\t\ted.Addenda99Contested.TraceNumber = traceNumber\n\t}\n\tif ed.Addenda99Dishonored != nil {\n\t\ted.Addenda99Dishonored.TraceNumber = traceNumber\n\t}\n}"],"Enums":[]}
