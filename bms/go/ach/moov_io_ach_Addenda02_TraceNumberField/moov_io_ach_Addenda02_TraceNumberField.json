{"Includes":["import (\n\t\"strings\"\n\t\"unicode/utf8\"\n)"],"Defines":["const ()"],"TypeDefs":[],"Globals":["var (\n\tmoov_io_ach_stringZeros map[int]string = moov_io_ach_populateMap(94, \"0\")\n)"],"Structs":["type moov_io_ach_Addenda02 struct {\n\t// ID is a client defined string used as a reference to this record.\n\n\t// TypeCode Addenda02 type code '02'\n\n\t// ReferenceInformationOne may be used for additional reference numbers, identification numbers,\n\t// or codes that the merchant needs to identify the particular transaction or customer.\n\n\t// ReferenceInformationTwo  may be used for additional reference numbers, identification numbers,\n\t// or codes that the merchant needs to identify the particular transaction or customer.\n\n\t// TerminalIdentificationCode identifies an Electronic terminal with a unique code that allows\n\t// a terminal owner and/or switching network to identify the terminal at which an Entry originated.\n\n\t// TransactionSerialNumber is assigned by the terminal at the time the transaction is originated.  The\n\t// number, with the Terminal Identification Code, serves as an audit trail for the transaction and is\n\t// usually assigned in ascending sequence.\n\n\t// TransactionDate expressed MMDD identifies the date on which the transaction occurred.\n\n\t// AuthorizationCodeOrExpireDate indicates the code that a card authorization center has\n\t// furnished to the merchant.\n\n\t// Terminal Location identifies the specific location of a terminal (i.e., street names of an\n\t// intersection, address, etc.) in accordance with the requirements of Regulation E.\n\n\t// TerminalCity Identifies the city in which the electronic terminal is located.\n\n\t// TerminalState Identifies the state in which the electronic terminal is located\n\n\t// TraceNumber Standard Entry Detail Trace Number\n\t//\n\t// Use TraceNumberField for a properly formatted string representation.\n\tTraceNumber string `json:\"traceNumber,omitempty\"`\n\t// validator is composed for data validation\n\n\t// converters is composed for ACH to GoLang Converters\n\tmoov_io_ach_converters\n}","type moov_io_ach_converters struct{}"],"Function Declarations":["","",""],"Function Implementations":["func (c *moov_io_ach_converters) stringField(s string, max uint) string {\n\tln := uint(utf8.RuneCountInString(s))\n\tif ln \u003e max {\n\t\treturn s[:max]\n\t}\n\n\t// Pad with preallocated string\n\tm := int(max - ln)\n\tpad, exists := moov_io_ach_stringZeros[m]\n\tif exists {\n\t\treturn pad + s\n\t}\n\t// slow path\n\treturn strings.Repeat(\"0\", m) + s\n}","func (addenda02 *moov_io_ach_Addenda02) TraceNumberField() string {\n\treturn addenda02.stringField(addenda02.TraceNumber, 15)\n}","func moov_io_ach_populateMap(max int, zero string) map[int]string {\n\tout := make(map[int]string, max)\n\tfor i := 0; i \u003c max; i++ {\n\t\tout[i] = strings.Repeat(zero, i)\n\t}\n\treturn out\n}"],"Enums":[]}
