{"Includes":["import (\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n)"],"Defines":["const ()"],"TypeDefs":[],"Globals":["var (\n\tmoov_io_ach_stringZeros map[int]string = moov_io_ach_populateMap(94, \"0\")\n)"],"Structs":["type moov_io_ach_EntryDetail struct {\n\t// ID is a client defined string used as a reference to this record.\n\n\t// TransactionCode if the receivers account is checking, savings, general ledger (GL) or loan.\n\n\t// RDFIIdentification is the RDFI's routing number without the last digit.\n\t// Receiving Depository Financial Institution\n\n\t// CheckDigit the last digit of the RDFI's routing number\n\n\t// DFIAccountNumber is the receiver's bank account number you are crediting/debiting.\n\t// It important to note that this is an alphanumeric field, so its space padded, no zero padded\n\n\t// Amount Number of cents you are debiting/crediting this account\n\tAmount int `json:\"amount\"`\n\t// IdentificationNumber an internal identification (alphanumeric) that\n\t// you use to uniquely identify this Entry Detail Record\n\n\t// IndividualName The name of the receiver, usually the name on the bank account\n\n\t// DiscretionaryData allows ODFIs to include codes, of significance only to them,\n\t// to enable specialized handling of the entry. There will be no\n\t// standardized interpretation for the value of this field. It can either\n\t// be a single two-character code, or two distinct one-character codes,\n\t// according to the needs of the ODFI and/or Originator involved. This\n\t// field must be returned intact for any returned entry.\n\t//\n\t// WEB and TEL batches use the Discretionary Data Field as the Payment Type Code\n\n\t// AddendaRecordIndicator indicates the existence of an Addenda Record.\n\t// A value of \"1\" indicates that one ore more addenda records follow,\n\t// and \"0\" means no such record is present.\n\n\t// TraceNumber is assigned by the ODFI or software vendor and used as part of identification.\n\t//\n\t// The format of trace numbers is the first 8 digits of the ODFI's routing number followed by\n\t// 7 digits chosen by the ODFI or software vendor.\n\t//\n\t// Sequentual or random numbers can be chosen. The only requirement of Nacha is unique trace\n\t// numbers within a batch and file.\n\t//\n\t// Trace Numbers are included in each Entry Detail Record, Corporate Entry Detail Record,\n\t// and addenda Record.\n\t//\n\t// In association with the Batch Number, transmission (File Creation) Date,\n\t// and File ID Modifier, the Trace Number uniquely identifies an entry within a given file.\n\t//\n\t// For addenda Records, the Trace Number will be identical to the Trace Number\n\t// in the associated Entry Detail Record, since the Trace Number is associated\n\t// with an entry or item rather than a physical record.\n\t//\n\t// Use TraceNumberField for a properly formatted string representation.\n\n\t// Addenda02 for use with StandardEntryClassCode MTE, POS, and SHR\n\n\t// Addenda05 for use with StandardEntryClassCode: ACK, ATX, CCD, CIE, CTX, DNE, ENR, WEB, PPD, TRX.\n\n\t// Addenda98 for user with Notification of Change\n\n\t// Addenda98 for user with Refused Notification of Change\n\n\t// Addenda99 for use with Returns\n\n\t// Addenda99Contested for use with Contested Dishonored Returns\n\n\t// Addenda99Dishonored for use with Dishonored Returns\n\n\t// Category defines if the entry is a Forward, Return, or NOC\n\n\t// validator is composed for data validation\n\n\t// converters is composed for ACH to golang Converters\n\tmoov_io_ach_converters\n}","type moov_io_ach_converters struct{}"],"Function Declarations":["","","",""],"Function Implementations":["func moov_io_ach_populateMap(max int, zero string) map[int]string {\n\tout := make(map[int]string, max)\n\tfor i := 0; i \u003c max; i++ {\n\t\tout[i] = strings.Repeat(zero, i)\n\t}\n\treturn out\n}","func (c *moov_io_ach_converters) numericField(n int, max uint) string {\n\ts := strconv.FormatInt(int64(n), 10)\n\tif l := uint(len(s)); l \u003e max {\n\t\treturn s[l-max:]\n\t} else {\n\t\tm := int(max - l)\n\t\tpad, exists := moov_io_ach_stringZeros[m]\n\t\tif exists {\n\t\t\treturn pad + s\n\t\t}\n\t\t// slow path\n\t\treturn strings.Repeat(\"0\", m) + s\n\t}\n}","func (ed *moov_io_ach_EntryDetail) AmountField() string {\n\treturn ed.numericField(ed.Amount, 10)\n}","func (ed *moov_io_ach_EntryDetail) amountOverflowsField() error {\n\tintstr := strconv.Itoa(ed.Amount)\n\tstrstr := ed.AmountField()\n\tif intstr == \"0\" \u0026\u0026 strstr == \"0000000000\" {\n\t\treturn nil // both are empty values\n\t}\n\tif len(intstr) \u003e len(strstr) {\n\t\treturn fmt.Errorf(\"does not match formatted value %s\", strstr)\n\t}\n\treturn nil\n}"],"Enums":[]}
