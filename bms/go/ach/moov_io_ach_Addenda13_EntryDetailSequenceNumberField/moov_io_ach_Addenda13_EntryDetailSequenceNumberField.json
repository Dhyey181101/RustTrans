{"Includes":["import (\n\t\"strconv\"\n\t\"strings\"\n)"],"Defines":["const ()"],"TypeDefs":[],"Globals":["var (\n\tmoov_io_ach_stringZeros map[int]string = moov_io_ach_populateMap(94, \"0\")\n)"],"Structs":["type moov_io_ach_Addenda13 struct {\n\t// ID is a client defined string used as a reference to this record.\n\n\t// TypeCode Addenda13 types code '13'\n\n\t// Originating DFI Name\n\t// For Outbound IAT Entries, this field must contain the name of the U.S. ODFI.\n\t// For Inbound IATs: Name of the foreign bank providing funding for the payment transaction\n\n\t// Originating DFI Identification Number Qualifier\n\t// For Inbound IATs: The 2-digit code that identifies the numbering scheme used in the\n\t// Foreign DFI Identification Number field:\n\t// 01 = National Clearing System\n\t// 02 = BIC Code\n\t// 03 = IBAN Code\n\n\t// Originating DFI Identification\n\t// This field contains the routing number that identifies the U.S. ODFI initiating the entry.\n\t// For Inbound IATs: This field contains the bank ID number of the Foreign Bank providing funding\n\t// for the payment transaction.\n\n\t// Originating DFI Branch Country Code\n\t// USb” = United States\n\t//(“b” indicates a blank space)\n\t// For Inbound IATs: This 3 position field contains a 2-character code as approved by the\n\t// International Organization for Standardization (ISO) used to identify the country in which\n\t// the branch of the bank that originated the entry is located. Values for other countries can\n\t// be found on the International Organization for Standardization website: www.iso.org.\n\n\t// EntryDetailSequenceNumber contains the ascending sequence number section of the Entry\n\t// Detail or Corporate Entry Detail Record's trace number This number is\n\t// the same as the last seven digits of the trace number of the related\n\t// Entry Detail Record or Corporate Entry Detail Record.\n\tEntryDetailSequenceNumber int `json:\"entryDetailSequenceNumber\"`\n\t// validator is composed for data validation\n\n\t// converters is composed for ACH to GoLang Converters\n\tmoov_io_ach_converters\n}","type moov_io_ach_converters struct{}"],"Function Declarations":["","",""],"Function Implementations":["func (c *moov_io_ach_converters) numericField(n int, max uint) string {\n\ts := strconv.FormatInt(int64(n), 10)\n\tif l := uint(len(s)); l \u003e max {\n\t\treturn s[l-max:]\n\t} else {\n\t\tm := int(max - l)\n\t\tpad, exists := moov_io_ach_stringZeros[m]\n\t\tif exists {\n\t\t\treturn pad + s\n\t\t}\n\t\t// slow path\n\t\treturn strings.Repeat(\"0\", m) + s\n\t}\n}","func (addenda13 *moov_io_ach_Addenda13) EntryDetailSequenceNumberField() string {\n\treturn addenda13.numericField(addenda13.EntryDetailSequenceNumber, 7)\n}","func moov_io_ach_populateMap(max int, zero string) map[int]string {\n\tout := make(map[int]string, max)\n\tfor i := 0; i \u003c max; i++ {\n\t\tout[i] = strings.Repeat(zero, i)\n\t}\n\treturn out\n}"],"Enums":[]}
