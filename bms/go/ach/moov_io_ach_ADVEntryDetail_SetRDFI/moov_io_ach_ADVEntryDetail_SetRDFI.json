{"Includes":["import (\n\t\"strings\"\n\t\"unicode/utf8\"\n)"],"Defines":["const ()"],"TypeDefs":[],"Globals":["var (\n\tmoov_io_ach_stringZeros map[int]string = moov_io_ach_populateMap(94, \"0\")\n)"],"Structs":["type moov_io_ach_ADVEntryDetail struct {\n\t// ID is a client defined string used as a reference to this record.\n\n\t// TransactionCode representing Accounting Entries\n\t// Credit for ACH debits originated - 81\n\t// Debit for ACH credits originated - 82\n\t// Credit for ACH credits received 83\n\t// Debit for ACH debits received 84\n\t// Credit for ACH credits in rejected batches 85\n\t// Debit for ACH debits in rejected batches - 86\n\t// Summary credit for respondent ACH activity - 87\n\t// Summary debit for respondent ACH activity - 88\n\n\t// RDFIIdentification is the RDFI's routing number without the last digit.\n\t// Receiving Depository Financial Institution\n\tRDFIIdentification string `json:\"RDFIIdentification\"`\n\t// CheckDigit the last digit of the RDFI's routing number\n\tCheckDigit string `json:\"checkDigit\"`\n\t// DFIAccountNumber is the receiver's bank account number you are crediting/debiting.\n\t// It important to note that this is an alphanumeric field, so its space padded, no zero padded\n\n\t// Amount Number of cents you are debiting/crediting this account\n\n\t// AdviceRoutingNumber\n\n\t// FileIdentification\n\n\t// ACHOperatorData\n\n\t// IndividualName The name of the receiver, usually the name on the bank account\n\n\t// DiscretionaryData allows ODFIs to include codes, of significance only to them,\n\t// to enable specialized handling of the entry. There will be no\n\t// standardized interpretation for the value of this field. It can either\n\t// be a single two-character code, or two distinct one-character codes,\n\t// according to the needs of the ODFI and/or Originator involved. This\n\t// field must be returned intact for any returned entry.\n\n\t// AddendaRecordIndicator indicates the existence of an Addenda Record.\n\t// A value of \"1\" indicates that one ore more addenda records follow,\n\t// and \"0\" means no such record is present.\n\n\t// ACHOperatorRoutingNumber\n\n\t// JulianDay\n\n\t// SequenceNumber\n\n\t// Addenda99 for use with Returns\n\n\t// Category defines if the entry is a Forward, Return, or NOC\n\n\t// validator is composed for data validation\n\n\t// converters is composed for ACH to golang Converters\n\tmoov_io_ach_converters\n}","type moov_io_ach_converters struct{}"],"Function Declarations":["","","",""],"Function Implementations":["func moov_io_ach_populateMap(max int, zero string) map[int]string {\n\tout := make(map[int]string, max)\n\tfor i := 0; i \u003c max; i++ {\n\t\tout[i] = strings.Repeat(zero, i)\n\t}\n\treturn out\n}","func (c *moov_io_ach_converters) stringField(s string, max uint) string {\n\tln := uint(utf8.RuneCountInString(s))\n\tif ln \u003e max {\n\t\treturn s[:max]\n\t}\n\n\t// Pad with preallocated string\n\tm := int(max - ln)\n\tpad, exists := moov_io_ach_stringZeros[m]\n\tif exists {\n\t\treturn pad + s\n\t}\n\t// slow path\n\treturn strings.Repeat(\"0\", m) + s\n}","func (c *moov_io_ach_converters) parseStringField(r string) (s string) {\n\ts = strings.TrimSpace(r)\n\treturn s\n}","func (ed *moov_io_ach_ADVEntryDetail) SetRDFI(rdfi string) *moov_io_ach_ADVEntryDetail {\n\ts := ed.stringField(rdfi, 9)\n\ted.RDFIIdentification = ed.parseStringField(s[:8])\n\ted.CheckDigit = ed.parseStringField(s[8:9])\n\treturn ed\n}"],"Enums":[]}
