{"Includes":["import (\n\t\"strconv\"\n\t\"strings\"\n\t\"unicode/utf8\"\n)"],"Defines":["const (\n\tmoov_io_ach_RecordLength                     = 94\n\tmoov_io_ach_CheckingDebit                    = 27\n\tmoov_io_ach_SavingsZeroDollarRemittanceDebit = 39\n\tmoov_io_ach_GLPrenoteDebit                   = 48\n\tmoov_io_ach_LoanPrenoteCredit                = 53\n\tmoov_io_ach_LoanZeroDollarRemittanceCredit   = 54\n\tmoov_io_ach_CreditSummary                    = 87\n)"],"TypeDefs":[],"Globals":["var ()"],"Structs":["type moov_io_ach_ADVEntryDetail struct {\n\t// ID is a client defined string used as a reference to this record.\n\n\t// TransactionCode representing Accounting Entries\n\t// Credit for ACH debits originated - 81\n\t// Debit for ACH credits originated - 82\n\t// Credit for ACH credits received 83\n\t// Debit for ACH debits received 84\n\t// Credit for ACH credits in rejected batches 85\n\t// Debit for ACH debits in rejected batches - 86\n\t// Summary credit for respondent ACH activity - 87\n\t// Summary debit for respondent ACH activity - 88\n\tTransactionCode int `json:\"transactionCode\"`\n\t// RDFIIdentification is the RDFI's routing number without the last digit.\n\t// Receiving Depository Financial Institution\n\tRDFIIdentification string `json:\"RDFIIdentification\"`\n\t// CheckDigit the last digit of the RDFI's routing number\n\tCheckDigit string `json:\"checkDigit\"`\n\t// DFIAccountNumber is the receiver's bank account number you are crediting/debiting.\n\t// It important to note that this is an alphanumeric field, so its space padded, no zero padded\n\tDFIAccountNumber string `json:\"DFIAccountNumber\"`\n\t// Amount Number of cents you are debiting/crediting this account\n\tAmount int `json:\"amount\"`\n\t// AdviceRoutingNumber\n\tAdviceRoutingNumber string `json:\"adviceRoutingNumber\"`\n\t// FileIdentification\n\tFileIdentification string `json:\"fileIdentification,omitempty\"`\n\t// ACHOperatorData\n\tACHOperatorData string `json:\"achOperatorData,omitempty\"`\n\t// IndividualName The name of the receiver, usually the name on the bank account\n\tIndividualName string `json:\"individualName\"`\n\t// DiscretionaryData allows ODFIs to include codes, of significance only to them,\n\t// to enable specialized handling of the entry. There will be no\n\t// standardized interpretation for the value of this field. It can either\n\t// be a single two-character code, or two distinct one-character codes,\n\t// according to the needs of the ODFI and/or Originator involved. This\n\t// field must be returned intact for any returned entry.\n\tDiscretionaryData string `json:\"discretionaryData,omitempty\"`\n\t// AddendaRecordIndicator indicates the existence of an Addenda Record.\n\t// A value of \"1\" indicates that one ore more addenda records follow,\n\t// and \"0\" means no such record is present.\n\tAddendaRecordIndicator int `json:\"addendaRecordIndicator,omitempty\"`\n\t// ACHOperatorRoutingNumber\n\tACHOperatorRoutingNumber string `json:\"achOperatorRoutingNumber\"`\n\t// JulianDay\n\tJulianDay int `json:\"julianDay\"`\n\t// SequenceNumber\n\tSequenceNumber int `json:\"sequenceNumber\"`\n\t// Addenda99 for use with Returns\n\n\t// Category defines if the entry is a Forward, Return, or NOC\n\n\t// validator is composed for data validation\n\n\t// converters is composed for ACH to golang Converters\n\tmoov_io_ach_converters\n}","type moov_io_ach_converters struct{}"],"Function Declarations":["","",""],"Function Implementations":["func (c *moov_io_ach_converters) parseStringField(r string) (s string) {\n\ts = strings.TrimSpace(r)\n\treturn s\n}","func (c *moov_io_ach_converters) parseNumField(r string) (s int) {\n\ts, _ = strconv.Atoi(strings.TrimSpace(r))\n\treturn s\n}","func (ed *moov_io_ach_ADVEntryDetail) Parse(record string) {\n\tif utf8.RuneCountInString(record) != 94 {\n\t\treturn\n\t}\n\trunes := []rune(record)\n\n\t// 1-1 Always \"6\"\n\t// 2-3 is checking credit 22 debit 27 savings credit 32 debit 37\n\ted.TransactionCode = ed.parseNumField(string(runes[1:3]))\n\t// 4-11 the RDFI's routing number without the last digit.\n\ted.RDFIIdentification = ed.parseStringField(string(runes[3:11]))\n\t// 12-12 The last digit of the RDFI's routing number\n\ted.CheckDigit = ed.parseStringField(string(runes[11:12]))\n\t// 13-27 The receiver's bank account number you are crediting/debiting\n\ted.DFIAccountNumber = string(runes[12:27])\n\t// 28-39 Number of cents you are debiting/crediting this account\n\ted.Amount = ed.parseNumField(string(runes[27:39]))\n\t// 40-48 Advice Routing Number\n\ted.AdviceRoutingNumber = ed.parseStringField(string(runes[39:48]))\n\t// 49-53 File Identification\n\ted.FileIdentification = ed.parseStringField(string(runes[48:53]))\n\t// 54-54 ACH Operator Data\n\ted.ACHOperatorData = ed.parseStringField(string(runes[53:54]))\n\t// 55-76 Individual Name\n\ted.IndividualName = string(runes[54:76])\n\t// 77-78 allows ODFIs to include codes of significance only to them, normally blank\n\ted.DiscretionaryData = string(runes[76:78])\n\t// 79-79 1 if addenda exists 0 if it does not\n\ted.AddendaRecordIndicator = ed.parseNumField(string(runes[78:79]))\n\t// 80-87\n\ted.ACHOperatorRoutingNumber = ed.parseStringField(string(runes[79:87]))\n\t// 88-90\n\ted.JulianDay = ed.parseNumField(string(runes[87:90]))\n\t// 91-94\n\ted.SequenceNumber = ed.parseNumField(string(runes[90:94]))\n}"],"Enums":[]}
