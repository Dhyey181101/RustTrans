{"Includes":["import \"math/rand\""],"Defines":["const ()"],"TypeDefs":["type Vector []int64"],"Globals":["var ()","var i, j, k, target, sum int64","var i int64"],"Structs":["type Matrix struct {\n\tN int64\n\tA []int64\n}"],"Function Declarations":["","","","","",""],"Function Implementations":["func (p Vector) Swap(i int64, j int64) {\n\tx := p[i]\n\tp[i] = p[j]\n\tp[j] = x\n}","func Perm(p Vector) {\n\tn := int64(len(p))\n\tvar i int64\n\tfor i = 0; i \u003c n; i++ {\n\t\tp[i] = int64(i)\n\t}\n\tfor i = 0; i \u003c n; i++ {\n\t\tp.Swap(i, i+rand.Int63n(n-i))\n\t}\n}","func unif(low, high int64) int64 {\n\treturn low + int64(float64(high-low+1)*rand.Float64())\n}","func (v Vector) Len() int64 {\n\treturn int64(len(v))\n}","func (m Matrix) Get(i int64, j int64) int64 {\n\treturn m.A[i*m.N+j]\n}","func genTrace(p Vector, trace *Matrix) {\n\tvar i, j, k, target, sum int64\n\tn := p.Len()\n\tnexti := make(Vector, n)\n\tnextj := make(Vector, n)\n\tsum_trace := make(Vector, n)\n\n\tPerm(nexti)\n\tPerm(nextj)\n\tfor i = 0; i \u003c n; i++ {\n\t\tfor j = 0; j \u003c n; j++ {\n\t\t\tsum_trace[i] += trace.Get(i, j)\n\t\t}\n\t}\n\n\tfor i = 0; i \u003c n; i++ {\n\t\ttarget = unif(0, sum_trace[nexti[i]]-1)\n\t\tj = i\n\t\tsum = trace.Get(nexti[i], nextj[j])\n\t\tfor sum \u003c target {\n\t\t\tj++\n\t\t\tsum += trace.Get(nexti[i], nextj[j])\n\t\t}\n\t\tp[nexti[i]] = nextj[j]\n\t\tfor k = i; k \u003c n; k++ {\n\t\t\tsum_trace[nexti[k]] -= trace.Get(nexti[k], nextj[j])\n\t\t}\n\t\tnextj.Swap(j, i)\n\t}\n}"],"Enums":[]}
