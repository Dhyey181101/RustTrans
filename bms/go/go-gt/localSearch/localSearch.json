{"Includes":["import \"math/rand\""],"Defines":["const ()"],"TypeDefs":["type Vector []int64"],"Globals":["var ()","var i, j, nMov int64","var i int64"],"Structs":["type Matrix struct {\n\tN int64\n\tA []int64\n}"],"Function Declarations":["","","","","",""],"Function Implementations":["func (v Vector) Len() int64 {\n\treturn int64(len(v))\n}","func (p Vector) Swap(i int64, j int64) {\n\tx := p[i]\n\tp[i] = p[j]\n\tp[j] = x\n}","func (m Matrix) Get(i int64, j int64) int64 {\n\treturn m.A[i*m.N+j]\n}","func delta(a *Matrix, b *Matrix, p Vector, r int64, s int64) (d int64) {\n\tvar i int64\n\td = int64((a.Get(r, r)-a.Get(s, s))*(b.Get(p[s], p[s])-b.Get(p[r], p[r])) +\n\t\t(a.Get(r, s)-a.Get(s, r))*(b.Get(p[s], p[r])-b.Get(p[r], p[s])))\n\tfor i = 0; i \u003c p.Len(); i++ {\n\t\tif i != r \u0026\u0026 i != s {\n\t\t\td += (a.Get(i, r)-a.Get(i, s))*(b.Get(p[i], p[s])-b.Get(p[i], p[r])) +\n\t\t\t\t(a.Get(r, i)-a.Get(s, i))*(b.Get(p[s], p[i])-b.Get(p[r], p[i]))\n\t\t}\n\t}\n\treturn d\n}","func unif(low, high int64) int64 {\n\treturn low + int64(float64(high-low+1)*rand.Float64())\n}","func localSearch(a *Matrix, b *Matrix, p Vector, cost *int64) {\n\t// set of moves, numbered from 0 to index\n\tvar i, j, nMov int64\n\tn := p.Len()\n\tmove := make(Vector, n*(n-1)/2)\n\tnMov = 0\n\tfor i = 0; i \u003c n-1; i++ {\n\t\tfor j = i + 1; j \u003c n; j++ {\n\t\t\tmove[nMov] = n*i + j\n\t\t\tnMov++\n\t\t}\n\t}\n\timproved := true\n\tfor k := 0; k \u003c 2 \u0026\u0026 improved; k++ {\n\t\timproved = false\n\t\tfor i = 0; i \u003c nMov-1; i++ {\n\t\t\tmove.Swap(i, unif(i+1, nMov-1))\n\t\t}\n\t\tfor i = 0; i \u003c nMov; i++ {\n\t\t\tr := move[i] / n\n\t\t\ts := move[i] % n\n\t\t\td := delta(a, b, p, r, s)\n\t\t\tif d \u003c 0 {\n\t\t\t\t*cost += d\n\t\t\t\tp.Swap(r, s)\n\t\t\t\timproved = true\n\t\t\t}\n\t\t}\n\t}\n\treturn\n}"],"Enums":[]}
