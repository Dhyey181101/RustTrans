{"Includes":[],"Defines":["const ()"],"TypeDefs":[],"Globals":["var ()","var j int64"],"Structs":["type Heap struct {\n\tN int64\n\tI []int64\n\tA []int64\n\tW []int64\n}","type Matrix struct {\n\tN int64\n\tA []int64\n}"],"Function Declarations":["","","","",""],"Function Implementations":["func (h Heap) less(a, b int64) bool {\n\ti, j := h.I[a], h.I[b]\n\treturn h.W[i] \u003c h.W[j]\n}","func (h Heap) swap(a, b int64) {\n\ti, j := h.I[a], h.I[b]\n\th.I[a], h.I[b] = h.I[b], h.I[a]\n\th.A[i], h.A[j] = b, a\n}","func (h Heap) up(j int64) {\n\tfor {\n\t\ti := (j - 1) / 2\n\t\tif i == j || h.less(i, j) {\n\t\t\tbreak\n\t\t}\n\t\th.swap(i, j)\n\t\tj = i\n\t}\n}","func (m Matrix) Get(i int64, j int64) int64 {\n\treturn m.A[i*m.N+j]\n}","func (h Heap) update(p []int64, i int64, G *Matrix) {\n\tvar j int64\n\tfor j = 0; j \u003c G.N; j++ {\n\t\tif G.Get(i, j) \u003e 0 {\n\t\t\tif h.W[i]+G.Get(i, j) \u003c h.W[j] {\n\t\t\t\tp[j] = i + 1\n\t\t\t\th.W[j] = h.W[i] + G.Get(i, j)\n\t\t\t\th.up(h.A[j])\n\t\t\t}\n\t\t}\n\t}\n}"],"Enums":[]}
