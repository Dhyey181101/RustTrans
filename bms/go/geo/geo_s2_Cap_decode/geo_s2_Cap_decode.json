{"Includes":["import (\n\t\"encoding/binary\"\n\t\"io\"\n\t\"math\"\n)"],"Defines":[],"TypeDefs":["type geo_s1_ChordAngle float64","type geo_s2_byteReader interface {\n\tio.Reader\n\tio.ByteReader\n}"],"Globals":[],"Structs":["type geo_s2_Cap struct {\n\tcenter geo_s2_Point\n\tradius geo_s1_ChordAngle\n}","type geo_s2_Point struct {\n\tgeo_r3_Vector\n}","type geo_r3_Vector struct {\n\tX, Y, Z float64\n}","type geo_s2_decoder struct {\n\tr   geo_s2_byteReader // the real reader passed to Decode\n\terr error\n\tbuf []byte\n}"],"Function Declarations":["","",""],"Function Implementations":["func (d *geo_s2_decoder) buffer() []byte {\n\tif d.buf == nil {\n\t\td.buf = make([]byte, 8)\n\t}\n\treturn d.buf\n}","func (d *geo_s2_decoder) readFloat64() float64 {\n\tif d.err != nil {\n\t\treturn 0\n\t}\n\tbuf := d.buffer()\n\t_, d.err = io.ReadFull(d.r, buf)\n\treturn math.Float64frombits(binary.LittleEndian.Uint64(buf))\n}","func (c *geo_s2_Cap) decode(d *geo_s2_decoder) {\n\tc.center.X = d.readFloat64()\n\tc.center.Y = d.readFloat64()\n\tc.center.Z = d.readFloat64()\n\tc.radius = geo_s1_ChordAngle(d.readFloat64())\n}"],"Enums":[]}
