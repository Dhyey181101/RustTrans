{"Includes":["import (\n\t\"math\"\n)"],"Defines":[],"TypeDefs":[],"Globals":[],"Structs":["type geo_s1_Interval struct {\n\tLo, Hi float64\n}"],"Function Declarations":["","","","",""],"Function Implementations":["func geo_s1_positiveDistance(a, b float64) float64 {\n\td := b - a\n\tif d \u003e= 0 {\n\t\treturn d\n\t}\n\treturn (b + math.Pi) - (a - math.Pi)\n}","func (i geo_s1_Interval) IsInverted() bool { return i.Lo \u003e i.Hi }","func (i geo_s1_Interval) IsEmpty() bool { return i.Lo == math.Pi \u0026\u0026 i.Hi == -math.Pi }","func (i geo_s1_Interval) fastContains(p float64) bool {\n\tif i.IsInverted() {\n\t\treturn (p \u003e= i.Lo || p \u003c= i.Hi) \u0026\u0026 !i.IsEmpty()\n\t}\n\treturn p \u003e= i.Lo \u0026\u0026 p \u003c= i.Hi\n}","func (i geo_s1_Interval) AddPoint(p float64) geo_s1_Interval {\n\tif math.Abs(p) \u003e math.Pi {\n\t\treturn i\n\t}\n\tif p == -math.Pi {\n\t\tp = math.Pi\n\t}\n\tif i.fastContains(p) {\n\t\treturn i\n\t}\n\tif i.IsEmpty() {\n\t\treturn geo_s1_Interval{p, p}\n\t}\n\tif geo_s1_positiveDistance(p, i.Lo) \u003c geo_s1_positiveDistance(i.Hi, p) {\n\t\treturn geo_s1_Interval{p, i.Hi}\n\t}\n\treturn geo_s1_Interval{i.Lo, p}\n}"],"Enums":[]}
