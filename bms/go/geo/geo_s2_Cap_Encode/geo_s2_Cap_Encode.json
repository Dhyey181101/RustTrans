{"Includes":["import (\n\t\"encoding/binary\"\n\t\"io\"\n)"],"Defines":[],"TypeDefs":["type geo_s1_ChordAngle float64"],"Globals":[],"Structs":["type geo_s2_Cap struct {\n\tcenter geo_s2_Point\n\tradius geo_s1_ChordAngle\n}","type geo_s2_Point struct {\n\tgeo_r3_Vector\n}","type geo_r3_Vector struct {\n\tX, Y, Z float64\n}","type geo_s2_encoder struct {\n\tw   io.Writer // the real writer passed to Encode\n\terr error\n}"],"Function Declarations":["","",""],"Function Implementations":["func (e *geo_s2_encoder) writeFloat64(x float64) {\n\tif e.err != nil {\n\t\treturn\n\t}\n\te.err = binary.Write(e.w, binary.LittleEndian, x)\n}","func (c geo_s2_Cap) encode(e *geo_s2_encoder) {\n\te.writeFloat64(c.center.X)\n\te.writeFloat64(c.center.Y)\n\te.writeFloat64(c.center.Z)\n\te.writeFloat64(float64(c.radius))\n}","func (c geo_s2_Cap) Encode(w io.Writer) error {\n\te := \u0026geo_s2_encoder{w: w}\n\tc.encode(e)\n\treturn e.err\n}"],"Enums":[]}
