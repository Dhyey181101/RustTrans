{"Includes":["import (\n\t\"math\"\n)"],"Defines":["const (\n\tgeo_s1_StraightChordAngle = geo_s1_ChordAngle(4)\n)","const epsilon = 5e-14"],"TypeDefs":["type geo_s1_ChordAngle float64","type geo_s2_typeTag uint32","type geo_s2_WedgeRel int","type geo_s2_CrossingType int","type geo_s2_axis int","type geo_s2_CellRelation int","type geo_s2_ShapeIndexIteratorPos int","type geo_s2_Direction int","type geo_s2_crossingTarget int","type geo_s2_Crossing int","type geo_s2_VertexModel int","type geo_r3_Axis int","type geo_s1_Angle float64"],"Globals":[],"Structs":["type geo_s2_Cap struct {\n\tcenter geo_s2_Point\n\tradius geo_s1_ChordAngle\n}","type geo_s2_Point struct {\n\tgeo_r3_Vector\n}","type geo_r3_Vector struct {\n\tX, Y, Z float64\n}"],"Function Declarations":["","","",""],"Function Implementations":["func (v geo_r3_Vector) Dot(ov geo_r3_Vector) float64 {\n\treturn float64(v.X*ov.X) + float64(v.Y*ov.Y) + float64(v.Z*ov.Z)\n}","func (v geo_r3_Vector) Norm2() float64 { return v.Dot(v) }","func (v geo_r3_Vector) IsUnit() bool {\n\tconst epsilon = 5e-14\n\treturn math.Abs(v.Norm2()-1) \u003c= epsilon\n}","func (c geo_s2_Cap) IsValid() bool {\n\treturn c.center.geo_r3_Vector.IsUnit() \u0026\u0026 c.radius \u003c= geo_s1_StraightChordAngle\n}"],"Enums":[]}
