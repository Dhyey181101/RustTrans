{"Includes":["import (\n\t\"math\"\n)"],"Defines":["const (\n\tgeo_s1_NegativeChordAngle = geo_s1_ChordAngle(-1)\n)"],"TypeDefs":["type geo_s1_Angle float64","type geo_s1_ChordAngle float64"],"Globals":["var ()"],"Structs":[],"Function Declarations":["","","",""],"Function Implementations":["func geo_s1_InfChordAngle() geo_s1_ChordAngle {\n\treturn geo_s1_ChordAngle(math.Inf(1))\n}","func (a geo_s1_Angle) Radians() float64 { return float64(a) }","func (a geo_s1_Angle) isInf() bool {\n\treturn math.IsInf(float64(a), 0)\n}","func geo_s1_ChordAngleFromAngle(a geo_s1_Angle) geo_s1_ChordAngle {\n\tif a \u003c 0 {\n\t\treturn geo_s1_NegativeChordAngle\n\t}\n\tif a.isInf() {\n\t\treturn geo_s1_InfChordAngle()\n\t}\n\tl := 2 * math.Sin(0.5*math.Min(math.Pi, a.Radians()))\n\treturn geo_s1_ChordAngle(l * l)\n}"],"Enums":[]}
