{"Includes":["import (\n\t\"math\"\n)"],"Defines":["const (\n\tgeo_s1_Radian geo_s1_Angle = 1\n)"],"TypeDefs":["type geo_s1_Angle float64"],"Globals":["var ()"],"Structs":["type geo_r3_Vector struct {\n\tX, Y, Z float64\n}"],"Function Declarations":["","","",""],"Function Implementations":["func (v geo_r3_Vector) Cross(ov geo_r3_Vector) geo_r3_Vector {\n\treturn geo_r3_Vector{\n\t\tfloat64(v.Y*ov.Z) - float64(v.Z*ov.Y),\n\t\tfloat64(v.Z*ov.X) - float64(v.X*ov.Z),\n\t\tfloat64(v.X*ov.Y) - float64(v.Y*ov.X),\n\t}\n}","func (v geo_r3_Vector) Dot(ov geo_r3_Vector) float64 {\n\treturn float64(v.X*ov.X) + float64(v.Y*ov.Y) + float64(v.Z*ov.Z)\n}","func (v geo_r3_Vector) Norm() float64 { return math.Sqrt(v.Dot(v)) }","func (v geo_r3_Vector) Angle(ov geo_r3_Vector) geo_s1_Angle {\n\treturn geo_s1_Angle(math.Atan2(v.Cross(ov).Norm(), v.Dot(ov))) * geo_s1_Radian\n}"],"Enums":[]}
