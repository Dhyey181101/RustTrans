{"Includes":["import (\n\t\"math\"\n)"],"Defines":[],"TypeDefs":["type geo_s1_ChordAngle float64"],"Globals":[],"Structs":["type geo_s2_Cap struct {\n\tcenter geo_s2_Point\n\tradius geo_s1_ChordAngle\n}","type geo_s2_Point struct {\n\tgeo_r3_Vector\n}","type geo_r3_Vector struct {\n\tX, Y, Z float64\n}"],"Function Declarations":["","","","",""],"Function Implementations":["func (c geo_s2_Cap) IsEmpty() bool {\n\treturn c.radius \u003c 0\n}","func (v geo_r3_Vector) Mul(m float64) geo_r3_Vector { return geo_r3_Vector{m * v.X, m * v.Y, m * v.Z} }","func (c geo_s2_Cap) Height() float64 {\n\treturn float64(0.5 * c.radius)\n}","func (c geo_s2_Cap) Area() float64 {\n\treturn 2.0 * math.Pi * math.Max(0, c.Height())\n}","func (c geo_s2_Cap) Centroid() geo_s2_Point {\n\t// From symmetry, the centroid of the cap must be somewhere on the line\n\t// from the origin to the center of the cap on the surface of the sphere.\n\t// When a sphere is divided into slices of constant thickness by a set of\n\t// parallel planes, all slices have the same surface area. This implies\n\t// that the radial component of the centroid is simply the midpoint of the\n\t// range of radial distances spanned by the cap. That is easily computed\n\t// from the cap height.\n\tif c.IsEmpty() {\n\t\treturn geo_s2_Point{}\n\t}\n\tr := 1 - 0.5*c.Height()\n\treturn geo_s2_Point{c.center.Mul(r * c.Area())}\n}"],"Enums":[]}
