{"Includes":["import (\n\t\"math\"\n)"],"Defines":["const (\n\tgeo_s2_epsilon = 1e-15\n\tgeo_r1_epsilon = 1e-15\n)"],"TypeDefs":[],"Globals":["var ()"],"Structs":["type geo_r2_Rect struct {\n\tX, Y geo_r1_Interval\n}","type geo_r1_Interval struct {\n\tLo, Hi float64\n}"],"Function Declarations":["","","",""],"Function Implementations":["func (i geo_r1_Interval) IsEmpty() bool { return i.Lo \u003e i.Hi }","func (i geo_r1_Interval) Length() float64 { return i.Hi - i.Lo }","func (i geo_r1_Interval) ApproxEqual(other geo_r1_Interval) bool {\n\tif i.IsEmpty() {\n\t\treturn other.Length() \u003c= 2*geo_r1_epsilon\n\t}\n\tif other.IsEmpty() {\n\t\treturn i.Length() \u003c= 2*geo_r1_epsilon\n\t}\n\treturn math.Abs(other.Lo-i.Lo) \u003c= geo_r1_epsilon \u0026\u0026\n\t\tmath.Abs(other.Hi-i.Hi) \u003c= geo_r1_epsilon\n}","func (r geo_r2_Rect) ApproxEqual(r2 geo_r2_Rect) bool {\n\treturn r.X.ApproxEqual(r2.X) \u0026\u0026 r.Y.ApproxEqual(r2.Y)\n}"],"Enums":[]}
