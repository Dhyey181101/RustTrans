{"Includes":["import (\n\t\"math\"\n)"],"Defines":[],"TypeDefs":[],"Globals":[],"Structs":["type geo_s1_Interval struct {\n\tLo, Hi float64\n}"],"Function Declarations":["","","","",""],"Function Implementations":["func geo_s1_FullInterval() geo_s1_Interval { return geo_s1_Interval{-math.Pi, math.Pi} }","func (i geo_s1_Interval) Complement() geo_s1_Interval {\n\tif i.Lo == i.Hi {\n\t\t// Singleton. The interval just contains a single point.\n\t\treturn geo_s1_FullInterval()\n\t}\n\t// Handles empty and full.\n\treturn geo_s1_Interval{i.Hi, i.Lo}\n}","func (i geo_s1_Interval) IsInverted() bool { return i.Lo \u003e i.Hi }","func (i geo_s1_Interval) Center() float64 {\n\tc := 0.5 * (i.Lo + i.Hi)\n\tif !i.IsInverted() {\n\t\treturn c\n\t}\n\tif c \u003c= 0 {\n\t\treturn c + math.Pi\n\t}\n\treturn c - math.Pi\n}","func (i geo_s1_Interval) ComplementCenter() float64 {\n\tif i.Lo != i.Hi {\n\t\treturn i.Complement().Center()\n\t}\n\t// Singleton. The interval just contains a single point.\n\tif i.Hi \u003c= 0 {\n\t\treturn i.Hi + math.Pi\n\t}\n\treturn i.Hi - math.Pi\n}"],"Enums":[]}
