{"Includes":["import (\n\t\"strings\"\n)"],"Defines":["const ()"],"TypeDefs":[],"Globals":["var ()","var splittedStr1, splittedStr2 []string","var out []string"],"Structs":[],"Function Declarations":["","",""],"Function Implementations":["func union(a, b []string) [][]rune {\n\tm := make(map[string]bool)\n\tfor _, item := range a {\n\t\tm[item] = true\n\t}\n\tfor _, item := range b {\n\t\tif _, ok := m[item]; !ok {\n\t\t\ta = append(a, item)\n\t\t}\n\t}\n\n\t// Convert a to rune matrix (with x -\u003e words and y -\u003e characters)\n\tout := make([][]rune, len(a))\n\tfor i, word := range a {\n\t\tout[i] = []rune(word)\n\t}\n\treturn out\n}","func ShingleSlice(s string, k int) []string {\n\tvar out []string\n\tm := make(map[string]int)\n\tif s != \"\" \u0026\u0026 k != 0 {\n\t\truneS := []rune(s)\n\t\tfor i := 0; i \u003c len(runeS)-k+1; i++ {\n\t\t\tm[string(runeS[i:i+k])]++\n\t\t}\n\t\tfor k := range m {\n\t\t\tout = append(out, k)\n\t\t}\n\t}\n\treturn out\n}","func JaccardSimilarity(str1, str2 string, splitLength int) float32 {\n\tif str1 == \"\" || str2 == \"\" {\n\t\treturn 0\n\t}\n\n\t// Split string before rune conversion for jaccard calculation\n\t// If splitLength == 0 then split on whitespaces\n\t// Else use shingle algorithm\n\tvar splittedStr1, splittedStr2 []string\n\tif splitLength == 0 {\n\t\tsplittedStr1 = strings.Split(str1, \" \")\n\t\tsplittedStr2 = strings.Split(str2, \" \")\n\t} else {\n\t\tsplittedStr1 = ShingleSlice(str1, splitLength)\n\t\tsplittedStr2 = ShingleSlice(str2, splitLength)\n\t}\n\n\t// Conversion of splitted string into rune array\n\truneStr1 := make([][]rune, len(splittedStr1))\n\tfor i, str := range splittedStr1 {\n\t\truneStr1[i] = []rune(str)\n\t}\n\truneStr2 := make([][]rune, len(splittedStr2))\n\tfor i, str := range splittedStr2 {\n\t\truneStr2[i] = []rune(str)\n\t}\n\n\t// Create union keywords slice between input strings\n\tunionStr := union(splittedStr1, splittedStr2)\n\tjacc := float32(len(runeStr1) + len(runeStr2) - len(unionStr))\n\n\treturn jacc / float32(len(unionStr))\n}"],"Enums":[]}
