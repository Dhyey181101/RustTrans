{"Includes":["import (\n    \"errors\"\n)"],"Defines":["const (\n)"],"TypeDefs":[],"Globals":["var (\n)","var counter int"],"Structs":[],"Function Declarations":["",""],"Function Implementations":["func Equal(a, b []rune) bool {\n\tif len(a) != len(b) {\n\t\treturn false\n\t}\n\tfor i, v := range a {\n\t\tif v != b[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}","func HammingDistance(str1, str2 string) (int, error) {\n\t// Convert strings to rune array to handle no-ASCII characters\n\truneStr1 := []rune(str1)\n\truneStr2 := []rune(str2)\n\n\tif len(runeStr1) != len(runeStr2) {\n\t\treturn 0, errors.New(\"Undefined for strings of unequal length\")\n\t} else if Equal(runeStr1, runeStr2) {\n\t\treturn 0, nil\n\t}\n\n\tvar counter int\n\tfor i := 0; i \u003c len(runeStr1); i++ {\n\t\tif runeStr1[i] != runeStr2[i] {\n\t\t\tcounter++\n\t\t}\n\t}\n\n\treturn counter, nil\n}"],"Enums":[]}
