{"Includes":["import (\n    \"strings\"\n    \"math\"\n)"],"Defines":["const (\n)"],"TypeDefs":[],"Globals":["var (\n)","var splittedStr1, splittedStr2 []string","var l1, l2 []int","var cosineSim float32","var out []string","var res int"],"Structs":[],"Function Declarations":["","","","","",""],"Function Implementations":["func Equal(a, b []rune) bool {\n\tif len(a) != len(b) {\n\t\treturn false\n\t}\n\tfor i, v := range a {\n\t\tif v != b[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}","func sum(arr []int) int {\n\tvar res int\n\tfor _, v := range arr {\n\t\tres += v\n\t}\n\treturn res\n}","func ShingleSlice(s string, k int) []string {\n\tvar out []string\n\tm := make(map[string]int)\n\tif s != \"\" \u0026\u0026 k != 0 {\n\t\truneS := []rune(s)\n\t\tfor i := 0; i \u003c len(runeS)-k+1; i++ {\n\t\t\tm[string(runeS[i:i+k])]++\n\t\t}\n\t\tfor k := range m {\n\t\t\tout = append(out, k)\n\t\t}\n\t}\n\treturn out\n}","func union(a, b []string) [][]rune {\n\tm := make(map[string]bool)\n\tfor _, item := range a {\n\t\tm[item] = true\n\t}\n\tfor _, item := range b {\n\t\tif _, ok := m[item]; !ok {\n\t\t\ta = append(a, item)\n\t\t}\n\t}\n\n\t// Convert a to rune matrix (with x -\u003e words and y -\u003e characters)\n\tout := make([][]rune, len(a))\n\tfor i, word := range a {\n\t\tout[i] = []rune(word)\n\t}\n\treturn out\n}","func find(slice [][]rune, val []rune) int {\n\tfor i, item := range slice {\n\t\tif Equal(item, val) {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}","func CosineSimilarity(str1, str2 string, splitLength int) float32 {\n\tif str1 == \"\" || str2 == \"\" {\n\t\treturn 0\n\t}\n\n\t// Split string before rune conversion for cosine calculation\n\t// If splitLength == 0 then split on whitespaces\n\t// Else use shingle algorithm\n\tvar splittedStr1, splittedStr2 []string\n\tif splitLength == 0 {\n\t\tsplittedStr1 = strings.Split(str1, \" \")\n\t\tsplittedStr2 = strings.Split(str2, \" \")\n\t} else {\n\t\tsplittedStr1 = ShingleSlice(str1, splitLength)\n\t\tsplittedStr2 = ShingleSlice(str2, splitLength)\n\t}\n\n\t// Conversion of plitted string into rune array\n\truneStr1 := make([][]rune, len(splittedStr1))\n\tfor i, str := range splittedStr1 {\n\t\truneStr1[i] = []rune(str)\n\t}\n\truneStr2 := make([][]rune, len(splittedStr2))\n\tfor i, str := range splittedStr2 {\n\t\truneStr2[i] = []rune(str)\n\t}\n\n\tvar l1, l2 []int\n\t// Create union keywords slice between input strings\n\tunionStr := union(splittedStr1, splittedStr2)\n\tfor _, word := range unionStr {\n\t\tfw := find(runeStr1, word)\n\t\tif fw != -1 {\n\t\t\tl1 = append(l1, 1)\n\t\t} else {\n\t\t\tl1 = append(l1, 0)\n\t\t}\n\n\t\tfw = find(runeStr2, word)\n\t\tif fw != -1 {\n\t\t\tl2 = append(l2, 1)\n\t\t} else {\n\t\t\tl2 = append(l2, 0)\n\t\t}\n\t}\n\n\t// Compute cosine algorithm\n\tvar cosineSim float32\n\tfor i := 0; i \u003c len(unionStr); i++ {\n\t\tcosineSim += float32(l1[i] * l2[i])\n\t}\n\n\treturn cosineSim / float32(math.Sqrt(float64(sum(l1)*sum(l2))))\n}"],"Enums":[]}
