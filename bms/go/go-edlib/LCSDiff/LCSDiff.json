{"Includes":["import (\n    \"errors\"\n)"],"Defines":["const (\n)"],"TypeDefs":[],"Globals":["var (\n)"],"Structs":[],"Function Declarations":["","","","",""],"Function Implementations":["func Max(a int, b int) int {\n\tif b \u003e a {\n\t\treturn b\n\t}\n\treturn a\n}","func processLCSDiff(str1 string, str2 string, lcsMatrix [][]int, m, n int) []string {\n\t// Convert strings to rune array to handle no-ASCII characters\n\truneStr1 := []rune(str1)\n\truneStr2 := []rune(str2)\n\n\tdiff := make([]string, 2)\n\n\tif m \u003e 0 \u0026\u0026 n \u003e 0 \u0026\u0026 runeStr1[m-1] == runeStr2[n-1] {\n\t\tdiff = processLCSDiff(str1, str2, lcsMatrix, m-1, n-1)\n\t\tdiff[0] = diff[0] + \" \" + string(runeStr1[m-1])\n\t\tdiff[1] = diff[1] + \"  \"\n\t\treturn diff\n\t} else if n \u003e 0 \u0026\u0026 (m == 0 || lcsMatrix[m][n-1] \u003e lcsMatrix[m-1][n]) {\n\t\tdiff = processLCSDiff(str1, str2, lcsMatrix, m, n-1)\n\t\tdiff[0] = diff[0] + \" \" + string(runeStr2[n-1])\n\t\tdiff[1] = diff[1] + \" +\"\n\t\treturn diff\n\t} else if m \u003e 0 \u0026\u0026 (n == 0 || lcsMatrix[m][n-1] \u003c= lcsMatrix[m-1][n]) {\n\t\tdiff = processLCSDiff(str1, str2, lcsMatrix, m-1, n)\n\t\tdiff[0] = diff[0] + \" \" + string(runeStr1[m-1])\n\t\tdiff[1] = diff[1] + \" -\"\n\t\treturn diff\n\t}\n\n\treturn diff\n}","func Equal(a, b []rune) bool {\n\tif len(a) != len(b) {\n\t\treturn false\n\t}\n\tfor i, v := range a {\n\t\tif v != b[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}","func lcsProcess(runeStr1, runeStr2 []rune) [][]int {\n\t// 2D Array that will contain str1 and str2 LCS\n\tlcsMatrix := make([][]int, len(runeStr1)+1)\n\tfor i := 0; i \u003c= len(runeStr1); i++ {\n\t\tlcsMatrix[i] = make([]int, len(runeStr2)+1)\n\t\tfor j := 0; j \u003c= len(runeStr2); j++ {\n\t\t\tlcsMatrix[i][j] = 0\n\t\t}\n\t}\n\n\tfor i := 1; i \u003c= len(runeStr1); i++ {\n\t\tfor j := 1; j \u003c= len(runeStr2); j++ {\n\t\t\tif runeStr1[i-1] == runeStr2[j-1] {\n\t\t\t\tlcsMatrix[i][j] = lcsMatrix[i-1][j-1] + 1\n\t\t\t} else {\n\t\t\t\tlcsMatrix[i][j] = Max(lcsMatrix[i][j-1], lcsMatrix[i-1][j])\n\t\t\t}\n\t\t}\n\t}\n\n\treturn lcsMatrix\n}","func LCSDiff(str1, str2 string) ([]string, error) {\n\truneStr1 := []rune(str1)\n\truneStr2 := []rune(str2)\n\n\tif len(runeStr1) == 0 || len(runeStr2) == 0 {\n\t\treturn nil, errors.New(\"Can't process LCS diff with empty string\")\n\t} else if Equal(runeStr1, runeStr2) {\n\t\treturn []string{str1}, nil\n\t}\n\n\tdiff := processLCSDiff(str1, str2, lcsProcess(runeStr1, runeStr2), len(runeStr1), len(runeStr2))\n\treturn diff, nil\n}"],"Enums":[]}
