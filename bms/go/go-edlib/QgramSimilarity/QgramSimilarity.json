{"Includes":["import (\n    \"math\"\n)"],"Defines":["const (\n)"],"TypeDefs":[],"Globals":["var (\n)"],"Structs":[],"Function Declarations":["","",""],"Function Implementations":["func Shingle(s string, k int) map[string]int {\n\tm := make(map[string]int)\n\tif s != \"\" \u0026\u0026 k != 0 {\n\t\truneS := []rune(s)\n\n\t\tfor i := 0; i \u003c len(runeS)-k+1; i++ {\n\t\t\tm[string(runeS[i:i+k])]++\n\t\t}\n\t}\n\treturn m\n}","func QgramDistanceCustomNgram(splittedStr1, splittedStr2 map[string]int) int {\n\tunion := make(map[string]int)\n\tfor i := range splittedStr1 {\n\t\tunion[i] = 0\n\t}\n\tfor i := range splittedStr2 {\n\t\tunion[i] = 0\n\t}\n\n\tres := 0\n\tfor i := range union {\n\t\tres += int(math.Abs(float64(splittedStr1[i] - splittedStr2[i])))\n\t}\n\n\treturn res\n}","func QgramSimilarity(str1, str2 string, splitLength int) float32 {\n\tsplittedStr1 := Shingle(str1, splitLength)\n\tsplittedStr2 := Shingle(str2, splitLength)\n\tres := float32(QgramDistanceCustomNgram(splittedStr1, splittedStr2))\n\treturn 1 - (res / float32(len(splittedStr1)+len(splittedStr2)))\n}"],"Enums":[]}
