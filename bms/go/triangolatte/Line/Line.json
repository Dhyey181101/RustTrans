{"Includes":["import (\n\t\"errors\"\n\t\"math\"\n)"],"Defines":["const (\n\t// Normal triangulates with no joint correction.\n\tNormal Joint = 0\n\t// Miter triangulates producing miter joints, i.e. extending the lines until\n\t// they meet at some point.\n\tMiter Joint = 1\n)"],"TypeDefs":["type Joint int"],"Globals":["var ()","var dx, dy float64","var miter1, miter2 Point","var n1, n2 [2]Point"],"Structs":["type Point struct {\n\tX, Y float64\n}"],"Function Declarations":["","","","","","","","",""],"Function Implementations":["func (p Point) Add(r Point) Point {\n\treturn Point{p.X + r.X, p.Y + r.Y}\n}","func (p Point) Sub(r Point) Point {\n\treturn Point{p.X - r.X, p.Y - r.Y}\n}","func (p Point) Scale(f float64) Point {\n\tnorm := float64(math.Sqrt(float64(p.X*p.X + p.Y*p.Y)))\n\treturn Point{p.X / norm * f, p.Y / norm * f}\n}","func (p Point) Normalize() Point {\n\treturn p.Scale(1)\n}","func (p Point) Dot(r Point) float64 {\n\treturn p.X*r.X + p.Y*r.Y\n}","func calculateNormals(x, y float64) [2]Point {\n\treturn [2]Point{\n\t\tPoint{y, -x}.Normalize(),\n\t\tPoint{-y, x}.Normalize(),\n\t}\n}","func miter(points []Point, width float64) []float64 {\n\twidth /= 2.0\n\ttriangles := make([]float64, 0, len(points)*12)\n\tvar dx, dy float64\n\tvar miter1, miter2 Point\n\tvar n1, n2 [2]Point\n\n\tdx = points[1].X - points[0].X\n\tdy = points[1].Y - points[0].Y\n\n\tn2 = calculateNormals(dx, dy)\n\tmiter2 = n2[0].Scale(width)\n\n\tfor i := 1; i \u003c len(points)-1; i++ {\n\t\t// Shift calculated values.\n\t\tn1 = n2\n\t\tmiter1 = miter2\n\n\t\tdx = points[i+1].X - points[i].X\n\t\tdy = points[i+1].Y - points[i].Y\n\n\t\tn2 = calculateNormals(dx, dy)\n\n\t\t// Find tangent vector to both lines in the middle point.\n\t\ttangent := (points[i+1].Sub(points[i])).Normalize().Add((points[i].Sub(points[i-1])).Normalize()).Normalize()\n\n\t\t// Miter vector is perpendicular to the tangent and crosses extensions of\n\t\t// normal-translated lines in miter join points.\n\t\tunitMiter := Point{-tangent.Y, tangent.X}\n\n\t\t// Length of the miter vector projected onto one of the normals.\n\t\t// Choice of normal is arbitrary, each of them would work.\n\t\tmiterLength := float64(width) / unitMiter.Dot(n1[0])\n\t\tmiter2 = unitMiter.Scale(miterLength)\n\n\t\tv0, v1 := points[i].Sub(miter2).X, points[i].Sub(miter2).Y\n\t\tv2, v3 := points[i-1].Sub(miter1).X, points[i-1].Sub(miter1).Y\n\t\tv4, v5 := points[i-1].Add(miter1).X, points[i-1].Add(miter1).Y\n\t\tv6, v7 := points[i-1].Add(miter1).X, points[i-1].Add(miter1).Y\n\t\tv8, v9 := points[i].Add(miter2).X, points[i].Add(miter2).Y\n\t\tv10, v11 := points[i].Sub(miter2).X, points[i].Sub(miter2).Y\n\n\t\ttriangles = append(triangles, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)\n\t}\n\n\t// Use last normal as another 'neutral element' for miter join.\n\tn := len(points)\n\tlastMiter := n2[0].Scale(width)\n\n\tv0, v1 := points[n-1].Sub(lastMiter).X, points[n-1].Sub(lastMiter).Y\n\tv2, v3 := points[n-2].Sub(miter1).X, points[n-2].Sub(miter1).Y\n\tv4, v5 := points[n-2].Add(miter1).X, points[n-2].Add(miter1).Y\n\tv6, v7 := points[n-2].Add(miter1).X, points[n-2].Add(miter1).Y\n\tv8, v9 := points[n-1].Add(lastMiter).X, points[n-1].Add(lastMiter).Y\n\tv10, v11 := points[n-1].Sub(lastMiter).X, points[n-1].Sub(lastMiter).Y\n\n\ttriangles = append(triangles, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)\n\n\treturn triangles\n}","func normal(points []Point, width float64) []float64 {\n\twidth /= 2.0\n\ttriangles := make([]float64, 0, len(points)*12)\n\tfor i := 0; i \u003c= len(points)-2; i++ {\n\t\tdx := points[i+1].X - points[i].X\n\t\tdy := points[i+1].Y - points[i].Y\n\t\tn1 := Point{dy, -dx}.Scale(width)\n\t\tn2 := Point{-dy, dx}.Scale(width)\n\n\t\tv0, v1 := points[i+1].Add(n2).X, points[i+1].Add(n2).Y\n\t\tv2, v3 := points[i].Add(n2).X, points[i].Add(n2).Y\n\t\tv4, v5 := points[i].Add(n1).X, points[i].Add(n1).Y\n\t\tv6, v7 := points[i].Add(n1).X, points[i].Add(n1).Y\n\t\tv8, v9 := points[i+1].Add(n1).X, points[i+1].Add(n1).Y\n\t\tv10, v11 := points[i+1].Add(n2).X, points[i+1].Add(n2).Y\n\n\t\ttriangles = append(triangles, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)\n\t}\n\n\treturn triangles\n}","func Line(joint Joint, points []Point, width float64) ([]float64, error) {\n\tswitch joint {\n\tcase Normal:\n\t\treturn normal(points, width), nil\n\tcase Miter:\n\t\treturn miter(points, width), nil\n\tdefault:\n\t\treturn nil, errors.New(\"Unrecognized joint type\")\n\t}\n}"],"Enums":[]}
