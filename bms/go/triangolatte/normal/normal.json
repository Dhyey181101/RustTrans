{"Includes":["import (\n\t\"math\"\n)"],"Defines":["const ()"],"TypeDefs":[],"Globals":["var ()"],"Structs":["type Point struct {\n\tX, Y float64\n}"],"Function Declarations":["","",""],"Function Implementations":["func (p Point) Add(r Point) Point {\n\treturn Point{p.X + r.X, p.Y + r.Y}\n}","func (p Point) Scale(f float64) Point {\n\tnorm := float64(math.Sqrt(float64(p.X*p.X + p.Y*p.Y)))\n\treturn Point{p.X / norm * f, p.Y / norm * f}\n}","func normal(points []Point, width float64) []float64 {\n\twidth /= 2.0\n\ttriangles := make([]float64, 0, len(points)*12)\n\tfor i := 0; i \u003c= len(points)-2; i++ {\n\t\tdx := points[i+1].X - points[i].X\n\t\tdy := points[i+1].Y - points[i].Y\n\t\tn1 := Point{dy, -dx}.Scale(width)\n\t\tn2 := Point{-dy, dx}.Scale(width)\n\n\t\tv0, v1 := points[i+1].Add(n2).X, points[i+1].Add(n2).Y\n\t\tv2, v3 := points[i].Add(n2).X, points[i].Add(n2).Y\n\t\tv4, v5 := points[i].Add(n1).X, points[i].Add(n1).Y\n\t\tv6, v7 := points[i].Add(n1).X, points[i].Add(n1).Y\n\t\tv8, v9 := points[i+1].Add(n1).X, points[i+1].Add(n1).Y\n\t\tv10, v11 := points[i+1].Add(n2).X, points[i+1].Add(n2).Y\n\n\t\ttriangles = append(triangles, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)\n\t}\n\n\treturn triangles\n}"],"Enums":[]}
