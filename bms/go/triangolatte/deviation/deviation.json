{"Includes":["import (\n    \"math\"\n)"],"Defines":["const (\n)"],"TypeDefs":[],"Globals":["var (\n)"],"Structs":["type Point struct {\n\tX, Y float64\n}"],"Function Declarations":["","",""],"Function Implementations":["func polygonArea(data []Point) float64 {\n\tarea := 0.0\n\tfor i, j := 0, len(data)-1; i \u003c len(data); i++ {\n\t\tarea += data[i].X*data[j].Y - data[i].Y*data[j].X\n\t\tj = i\n\t}\n\treturn math.Abs(area / 2)\n}","func trianglesArea(t []float64) float64 {\n\ttrianglesArea := 0.0\n\tfor i := 0; i \u003c len(t); i += 6 {\n\t\ttrianglesArea += math.Abs((t[i]*(t[i+3]-t[i+5]) + t[i+2]*(t[i+5]-t[i+1]) + t[i+4]*(t[i+1]-t[i+3])) / 2)\n\t}\n\treturn trianglesArea\n}","func deviation(data []Point, holes [][]Point, t []float64) (\n\tactual,\n\tcalculated,\n\tdeviation float64,\n) {\n\tcalculated = trianglesArea(t)\n\tactual = polygonArea(data)\n\tfor _, h := range holes {\n\t\tactual -= polygonArea(h)\n\t}\n\n\tdeviation = math.Abs(calculated - actual)\n\treturn\n}"],"Enums":[]}
